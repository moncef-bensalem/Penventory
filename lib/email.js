/**
 * Module de simulation d'envoi d'email
 * 
 * En mode d√©veloppement, cette fonction simule l'envoi d'emails en
 * affichant les d√©tails dans la console.
 * 
 * En production, vous devrez remplacer cette impl√©mentation par un
 * v√©ritable service d'envoi d'emails comme:
 * - Nodemailer avec SMTP
 * - SendGrid
 * - Mailgun
 * - Amazon SES
 */

import nodemailer from 'nodemailer';

// Configuration pour l'environnement
const isProduction = process.env.NODE_ENV === 'production';

// Cr√©er un transporteur pour l'envoi d'emails
let transporter = nodemailer.createTransport({
  service: 'gmail',  // Utiliser le service pr√©d√©fini Gmail au lieu de la configuration manuelle
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com',
    pass: process.env.EMAIL_SERVER_PASSWORD || 'wkyl meph nbeq sddb',
  },
  tls: {
    rejectUnauthorized: false  // Aide √† r√©soudre certains probl√®mes de certificat en production
  },
  // D√©sactiver la v√©rification du certificat pour √©viter les probl√®mes en production
  ignoreTLS: false,
  requireTLS: true,
  debug: true, // Activer le debug pour voir les erreurs d√©taill√©es
});

/**
 * Fonction d'envoi d'email
 * @param {Object} params Param√®tres d'envoi
 * @param {string} params.to Adresse email du destinataire
 * @param {string} params.subject Sujet de l'email
 * @param {string} params.text Contenu texte de l'email
 * @param {string} params.html Contenu HTML de l'email
 * @returns {Promise} Promesse r√©solue apr√®s l'envoi
 */
export async function sendEmail({ to, subject, text, html }) {
  try {
    // Pr√©parer les options d'email
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'moncefbensalem222@gmail.com',
      to,
      subject,
      text,
      html,
    };

    // Afficher les informations de configuration pour le d√©bogage
    console.log('Configuration email:');
    console.log('- Mode:', isProduction ? 'PRODUCTION' : 'D√âVELOPPEMENT');
    console.log('- SEND_REAL_EMAILS:', process.env.SEND_REAL_EMAILS);
    console.log('- EMAIL_SERVER_USER:', process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com');
    // Ne pas afficher le mot de passe complet pour des raisons de s√©curit√©
    const passLength = (process.env.EMAIL_SERVER_PASSWORD || 'wkyl meph nbeq sddb').length;
    console.log('- EMAIL_SERVER_PASSWORD:', '*'.repeat(passLength) + ' (' + passLength + ' caract√®res)');

    // En production ou avec SEND_REAL_EMAILS activ√©, envoyer des emails r√©els
    if (isProduction || process.env.SEND_REAL_EMAILS === 'true') {
      console.log('Envoi d\'un email r√©el √†:', to);
      
      // V√©rifier la connexion au serveur SMTP avant d'envoyer
      try {
        await new Promise((resolve, reject) => {
          transporter.verify(function (error, success) {
            if (error) {
              console.error('Erreur de v√©rification SMTP:', error);
              reject(error);
            } else {
              console.log('Serveur SMTP pr√™t √† recevoir des messages');
              resolve(success);
            }
          });
        });
      } catch (verifyError) {
        console.error('Impossible de se connecter au serveur SMTP:', verifyError);
        throw new Error(`Erreur de connexion SMTP: ${verifyError.message}`);
      }
      
      // Envoyer l'email
      const info = await transporter.sendMail(mailOptions);
      console.log('Email envoy√© avec succ√®s:', info.messageId);
      return {
        success: true,
        id: info.messageId,
        message: 'Email envoy√© avec succ√®s'
      };
    } 
    // Sinon, simuler l'envoi en d√©veloppement
    else {
      // Afficher les d√©tails de l'email dans la console
      console.log('');
      console.log('=====================================================');
      console.log('üöÄ SIMULATION D\'ENVOI D\'EMAIL');
      console.log('-----------------------------------------------------');
      console.log('üìß De: ' + mailOptions.from);
      console.log('üìß √Ä: ' + to);
      console.log('üìã Sujet: ' + subject);
      console.log('üìù Contenu:');
      console.log(text);
      console.log('-----------------------------------------------------');
      console.log('‚ö†Ô∏è EMAIL SIMUL√â - Pour envoyer des emails r√©els, ajoutez SEND_REAL_EMAILS=true √† votre fichier .env');
      console.log('=====================================================');
      console.log('');
      
      // Simuler un d√©lai de traitement
      await new Promise(resolve => setTimeout(resolve, 300));
      
      return {
        success: true,
        id: `simulated-${Date.now()}`,
        message: 'Email simul√© avec succ√®s'
      };
    }
  } catch (error) {
    console.error('Erreur d√©taill√©e lors de l\'envoi de l\'email:', error);
    console.error('Type d\'erreur:', error.name);
    console.error('Code d\'erreur:', error.code);
    console.error('Commande:', error.command);
    console.error('R√©ponse:', error.response);
    console.error('Message:', error.message);
    
    throw new Error(`Erreur lors de l'envoi de l'email: ${error.message}`);
  }
} 