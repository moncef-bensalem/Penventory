/**
 * Module de simulation d'envoi d'email
 * 
 * En mode d√©veloppement, cette fonction simule l'envoi d'emails en
 * affichant les d√©tails dans la console.
 * 
 * En production, vous devrez remplacer cette impl√©mentation par un
 * v√©ritable service d'envoi d'emails comme:
 * - Nodemailer avec SMTP
 * - SendGrid
 * - Mailgun
 * - Amazon SES
 */

import nodemailer from 'nodemailer';

// Configuration pour l'environnement
const isProduction = process.env.NODE_ENV === 'production';

// Cr√©er un transporteur pour l'envoi d'emails
let transporter;

// V√©rifier que les variables d'environnement n√©cessaires sont d√©finies
if (!process.env.EMAIL_SERVER_USER || !process.env.EMAIL_SERVER_PASSWORD) {
  console.error('ERREUR: Variables d\'environnement EMAIL_SERVER_USER ou EMAIL_SERVER_PASSWORD non d√©finies');
  console.error('Veuillez configurer ces variables dans votre fichier .env ou dans votre environnement de production');
}

// D√©tecter si nous sommes en environnement de production
const isProd = process.env.NODE_ENV === 'production';
console.log(`Environnement d√©tect√©: ${isProd ? 'PRODUCTION' : 'D√âVELOPPEMENT'}`);

// Configuration sp√©cifique pour la production
if (isProd) {
  console.log('Utilisation de la configuration SMTP s√©curis√©e pour la production');
  
  // Configuration Gmail avec OAuth2 pour une meilleure s√©curit√©
  // Voir: https://nodemailer.com/smtp/oauth2/
  transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com',
    port: 465,
    secure: true,
    auth: {
      user: process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com',
      // IMPORTANT: Utiliser un nouveau mot de passe d'application g√©n√©r√© depuis votre compte Google
      pass: process.env.EMAIL_SERVER_PASSWORD,
    },
    tls: {
      rejectUnauthorized: false
    },
    debug: true,  // Activer le debug pour voir les erreurs d√©taill√©es
  });
  
  // V√©rifier imm√©diatement la connexion
  transporter.verify(function(error, success) {
    if (error) {
      console.error('Erreur avec la configuration service Gmail:', error);
      console.log('Tentative avec une configuration SMTP manuelle...');
      
      // Si la premi√®re configuration √©choue, essayer avec une configuration manuelle
      transporter = nodemailer.createTransport({
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
          user: process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com',
          pass: process.env.EMAIL_SERVER_PASSWORD || 'bkab egva uenf ctkp',
        },
        tls: {
          rejectUnauthorized: false
        },
        debug: true
      });
    } else {
      console.log('Connexion SMTP Gmail √©tablie avec succ√®s');
    }
  });
} else {
  // Configuration pour le d√©veloppement local
  console.log('Utilisation de la configuration SMTP standard pour le d√©veloppement');
  transporter = nodemailer.createTransport({
    service: 'gmail',
    host: 'smtp.gmail.com',
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com',
      pass: process.env.EMAIL_SERVER_PASSWORD || 'wkyl meph nbeq sddb',
    },
    debug: true  // Activer le debug pour voir les erreurs d√©taill√©es
  });
}

// V√©rifier la connexion au serveur SMTP
transporter.verify(function(error, success) {
  if (error) {
    console.error('Erreur de connexion au serveur SMTP:', error);
  } else {
    console.log('Serveur SMTP pr√™t √† recevoir des messages');
  }
});

/**
 * Fonction d'envoi d'email
 * @param {Object} params Param√®tres d'envoi
 * @param {string} params.to Adresse email du destinataire
 * @param {string} params.subject Sujet de l'email
 * @param {string} params.text Contenu texte de l'email
 * @param {string} params.html Contenu HTML de l'email
 * @returns {Promise} Promesse r√©solue apr√®s l'envoi
 */
export async function sendEmail({ to, subject, text, html }) {
  try {
    // Pr√©parer les options d'email
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'moncefbensalem222@gmail.com',
      to,
      subject,
      text,
      html,
    };

    // Afficher les informations de configuration pour le d√©bogage
    console.log('Configuration email:');
    console.log('- Mode:', isProduction ? 'PRODUCTION' : 'D√âVELOPPEMENT');
    console.log('- SEND_REAL_EMAILS:', process.env.SEND_REAL_EMAILS);
    
    // V√©rifier si les variables d'environnement sont d√©finies
    if (!process.env.EMAIL_SERVER_USER || !process.env.EMAIL_SERVER_PASSWORD) {
      console.error('ATTENTION: Variables d\'environnement EMAIL_SERVER_USER ou EMAIL_SERVER_PASSWORD non d√©finies');
    } else {
      console.log('- EMAIL_SERVER_USER:', process.env.EMAIL_SERVER_USER);
      // Ne pas afficher le mot de passe pour des raisons de s√©curit√©
      const passLength = process.env.EMAIL_SERVER_PASSWORD.length;
      console.log('- EMAIL_SERVER_PASSWORD:', '*'.repeat(passLength) + ' (' + passLength + ' caract√®res)');
    }

    // En production ou avec SEND_REAL_EMAILS activ√©, envoyer des emails r√©els
    if (isProduction || process.env.SEND_REAL_EMAILS === 'true') {
      console.log('Envoi d\'un email r√©el √†:', to);
      console.log('Variables d\'environnement disponibles:', {
        NODE_ENV: process.env.NODE_ENV,
        EMAIL_SERVER_USER: process.env.EMAIL_SERVER_USER ? 'D√©fini' : 'Non d√©fini',
        EMAIL_SERVER_PASSWORD: process.env.EMAIL_SERVER_PASSWORD ? 'D√©fini (longueur: ' + process.env.EMAIL_SERVER_PASSWORD.length + ')' : 'Non d√©fini',
        EMAIL_FROM: process.env.EMAIL_FROM || 'Non d√©fini (utilisant valeur par d√©faut)',
      });
      
      // V√©rifier la connexion au serveur SMTP avant d'envoyer
      try {
        await new Promise((resolve, reject) => {
          transporter.verify(function (error, success) {
            if (error) {
              console.error('Erreur de v√©rification SMTP:', error);
              console.error('D√©tails de l\'erreur:', JSON.stringify(error, null, 2));
              reject(error);
            } else {
              console.log('Serveur SMTP pr√™t √† recevoir des messages');
              resolve(success);
            }
          });
        });
      } catch (verifyError) {
        console.error('Impossible de se connecter au serveur SMTP:', verifyError);
        console.error('D√©tails de l\'erreur de connexion:', JSON.stringify(verifyError, null, 2));
        
        // Essayer une configuration alternative en cas d'√©chec
        console.log('Tentative avec une configuration alternative...');
        try {
          const alternativeTransporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: process.env.EMAIL_SERVER_USER || 'moncefbensalem222@gmail.com',
              pass: process.env.EMAIL_SERVER_PASSWORD || 'bkab egva uenf ctkp',
            },
          });
          
          console.log('Envoi avec la configuration alternative');
          const info = await alternativeTransporter.sendMail(mailOptions);
          console.log('Email envoy√© avec succ√®s (configuration alternative):', info.messageId);
          return {
            success: true,
            id: info.messageId,
            message: 'Email envoy√© avec succ√®s (configuration alternative)'
          };
        } catch (alternativeError) {
          console.error('L\'envoi avec la configuration alternative a √©galement √©chou√©:', alternativeError);
          throw new Error(`Erreur lors de l'envoi de l'email: ${verifyError.message}. Alternative √©galement √©chou√©e: ${alternativeError.message}`);
        }
      }
      
      // Envoyer l'email avec la configuration principale
      try {
        const info = await transporter.sendMail(mailOptions);
        console.log('Email envoy√© avec succ√®s:', info.messageId);
        return {
          success: true,
          id: info.messageId,
          message: 'Email envoy√© avec succ√®s'
        };
      } catch (sendError) {
        console.error('Erreur lors de l\'envoi de l\'email:', sendError);
        throw sendError;
      }
    } 
    // Sinon, simuler l'envoi en d√©veloppement
    else {
      // Afficher les d√©tails de l'email dans la console
      console.log('');
      console.log('=====================================================');
      console.log('üöÄ SIMULATION D\'ENVOI D\'EMAIL');
      console.log('-----------------------------------------------------');
      console.log('üìß De: ' + mailOptions.from);
      console.log('üìß √Ä: ' + to);
      console.log('üìã Sujet: ' + subject);
      console.log('üìù Contenu:');
      console.log(text);
      console.log('-----------------------------------------------------');
      console.log('‚ö†Ô∏è EMAIL SIMUL√â - Pour envoyer des emails r√©els, ajoutez SEND_REAL_EMAILS=true √† votre fichier .env');
      console.log('=====================================================');
      console.log('');
      
      // Simuler un d√©lai de traitement
      await new Promise(resolve => setTimeout(resolve, 300));
      
      return {
        success: true,
        id: `simulated-${Date.now()}`,
        message: 'Email simul√© avec succ√®s'
      };
    }
  } catch (error) {
    console.error('Erreur d√©taill√©e lors de l\'envoi de l\'email:', error);
    console.error('Type d\'erreur:', error.name);
    console.error('Code d\'erreur:', error.code);
    console.error('Commande:', error.command);
    console.error('R√©ponse:', error.response);
    console.error('Message:', error.message);
    
    throw new Error(`Erreur lors de l'envoi de l'email: ${error.message}`);
  }
} 